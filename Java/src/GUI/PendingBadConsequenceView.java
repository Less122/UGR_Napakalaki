package GUI;
import Napakalaki.*;
import java.util.ArrayList;

public class PendingBadConsequenceView extends javax.swing.JPanel {

    /**
     * Creates new form PendingBadConsequenceView
     */
    public PendingBadConsequenceView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    textLabel = new javax.swing.JLabel();
    levelsLabel = new javax.swing.JLabel();
    visibleTreasuresLabel = new javax.swing.JLabel();
    hiddenTreasuresLabel = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    listaVisible = new javax.swing.JList<>();
    jScrollPane2 = new javax.swing.JScrollPane();
    listaHidden = new javax.swing.JList<>();
    levelTextField = new javax.swing.JTextField();
    vTreasuresTextField = new javax.swing.JTextField();
    hTreasuresTextField = new javax.swing.JTextField();

    textLabel.setFont(new java.awt.Font("Open Sans", 2, 12)); // NOI18N
    textLabel.setText("Text");

    levelsLabel.setText("Levels:");

    visibleTreasuresLabel.setText("Visible Treasures:");

    hiddenTreasuresLabel.setText("Hidden Treasures:");

    jScrollPane1.setViewportView(listaVisible);

    jScrollPane2.setViewportView(listaHidden);

    levelTextField.setEditable(false);
    levelTextField.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    levelTextField.setText("0");

    vTreasuresTextField.setEditable(false);
    vTreasuresTextField.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    vTreasuresTextField.setText("0");

    hTreasuresTextField.setEditable(false);
    hTreasuresTextField.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    hTreasuresTextField.setText("0");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(1, 1, 1)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1)
          .addComponent(jScrollPane2)))
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(textLabel)
          .addComponent(levelsLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(levelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
        .addComponent(visibleTreasuresLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(vTreasuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(39, 39, 39)
        .addComponent(hiddenTreasuresLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(hTreasuresTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
              .addComponent(textLabel)
              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
              .addComponent(levelsLabel))
            .addComponent(levelTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(hiddenTreasuresLabel, javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(hTreasuresTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
              .addGap(9, 9, 9)
              .addComponent(visibleTreasuresLabel))
            .addComponent(vTreasuresTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTextField hTreasuresTextField;
  private javax.swing.JLabel hiddenTreasuresLabel;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTextField levelTextField;
  private javax.swing.JLabel levelsLabel;
  private javax.swing.JList<String> listaHidden;
  private javax.swing.JList<String> listaVisible;
  private javax.swing.JLabel textLabel;
  private javax.swing.JTextField vTreasuresTextField;
  private javax.swing.JLabel visibleTreasuresLabel;
  // End of variables declaration//GEN-END:variables

  BadConsequence ModelPendingBadConsequence;
    
  public void setPendingBadConsequence( BadConsequence bq ) 
  {
    ModelPendingBadConsequence = bq;
        
    if ( bq == null || bq.isEmpty() )
            
      textLabel.setText( "Nada" );
        
		else
		{
      textLabel.setText( bq.getText() );
			levelTextField.setText( String.valueOf( bq.getLevels() ) );
			
			// Vaciamos las listas
			listaVisible.setListData(new String[0] ); 
			listaHidden.setListData(new String[0] );
			
			if ( bq instanceof DeathBadConsequence ) {
				textLabel.setText( "Estas muerto." );
			}
			else if ( bq instanceof SpecificBadConsequence ) {
				ArrayList<TreasureKind> specificVisibleTreasures = new ArrayList( ((SpecificBadConsequence) bq).getSpecificVisibleTreasures() );
				ArrayList<TreasureKind> specificHiddenTreasures = new ArrayList( ((SpecificBadConsequence) bq).getSpecificHiddenTreasures() );
				
				for ( TreasureKind t : specificVisibleTreasures )
				{
					String tipo = "";
					
					if ( null != t ) switch ( t ) {
						case ARMOR:
							tipo = "ARMOR";			break;
						case BOTHHANDS:
							tipo = "BOTHHANDS"; break;
						case HELMET:
							tipo = "HELMET";		break;
						case ONEHAND:
							tipo = "ONEHAND";		break;
						case SHOES:
							tipo = "SHOES";			break;
					}
					
					String[] s = new String[] { tipo };
					listaVisible.setListData( s );
				}
				for ( TreasureKind t : specificHiddenTreasures )
				{
					String tipo = "";
					
					if ( null != t ) switch ( t ) {
						case ARMOR:
							tipo = "ARMOR";			break;
						case BOTHHANDS:
							tipo = "BOTHHANDS"; break;
						case HELMET:
							tipo = "HELMET";		break;
						case ONEHAND:
							tipo = "ONEHAND";		break;
						case SHOES:
							tipo = "SHOES";			break;
					}
					
					String[] s = new String[] { tipo };
					listaHidden.setListData( s );
				}
			}
			else if ( bq instanceof NumericBadConsequence ) {
				vTreasuresTextField.setText( String.valueOf( ((NumericBadConsequence) bq).getNVisibleTreasures() ) );
				hTreasuresTextField.setText( String.valueOf( ((NumericBadConsequence) bq).getNHiddenTreasures() ) );
			}
		}
        
    repaint();
    revalidate();
  }
}
