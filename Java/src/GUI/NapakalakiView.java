package GUI;
import Napakalaki.*;
import java.awt.Color;

public class NapakalakiView extends javax.swing.JFrame {

    /**
     * Creates new form NapakalakiView
     */
    public NapakalakiView() {
        initComponents();
		this.getContentPane().setBackground(Color.getHSBColor(255,153,0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        meetTheMonsterButton = new javax.swing.JButton();
        combatButton = new javax.swing.JButton();
        nextTurnButton = new javax.swing.JButton();
        currentMonsterView = new GUI.MonsterView();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        currentPlayerView = new GUI.PlayerView();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(java.awt.SystemColor.activeCaption);

        meetTheMonsterButton.setText("Meet the Monster");
        meetTheMonsterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        meetTheMonsterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meetTheMonsterButtonActionPerformed(evt);
            }
        });

        combatButton.setText("¡ F I G H T !");
        combatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combatButtonActionPerformed(evt);
            }
        });

        nextTurnButton.setText("Next Turn");
        nextTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTurnButtonActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setTabSize(2);
        jScrollPane1.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(meetTheMonsterButton)
                        .addGap(18, 18, 18)
                        .addComponent(combatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nextTurnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(currentPlayerView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(currentMonsterView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(currentPlayerView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meetTheMonsterButton)
                    .addComponent(combatButton)
                    .addComponent(nextTurnButton))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(currentMonsterView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void meetTheMonsterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meetTheMonsterButtonActionPerformed
        meet_the_monster = true;
				textArea.setText( "(DANGER) The monster is aproaching. It's time for battle!" );
        setNapakalaki( napakalakiModel );
    }//GEN-LAST:event_meetTheMonsterButtonActionPerformed

    private void combatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combatButtonActionPerformed
		if ( meet_the_monster )
    {
      CombatResult combat_result;
            
      combat_result = napakalakiModel.developCombat();
      combatButton.setEnabled( false );
			meet_the_monster = false;
			already_fought = true;
            
      if ( combat_result == CombatResult.WIN )
      {
        textArea.setText( "(RESULT) You won the combat!. Enjoy your prize." );
      }
      else if ( combat_result == CombatResult.LOSE )
      {
				textArea.setText( "(RESULT) You lost the combat...");
				if ( !napakalakiModel.getCurrentPlayer().isDead() )
                    textArea.setText( textArea.getText() + "\n(BC) Now you have to redeem your bad consequence." );
				else
					textArea.setText( textArea.getText() + "\n Now you are dead." );
      }
      else if ( combat_result == CombatResult.LOSEANDCONVERT )
			{
				textArea.setText( "(RESULT) You lost the combat and converted into a cultist."
                        + "\n(BC) Now you have to redeem your bad consequence." );
      }
      else if ( combat_result == CombatResult.WINGAME )
      {
				textArea.setText( "¡CONGRATULATIONS! You won the match." );
				this.dispose();
				FinishGameView finish = new FinishGameView(this, true);	
				finish.finishGame(napakalakiModel.getCurrentPlayer().getName() );
      }
			
      if ( napakalakiModel.getCurrentPlayer().getLevels() < 1 )
      {
				textArea.setText( "(RESULT) You lost the combat..."
                        + "\n(DEATH) Losing the combat costed you your life." );
                //currentPlayerView.playerDied();
			}
			currentPlayerView.enableTreasureButtons();
		}
        
		setNapakalaki( napakalakiModel );
    }//GEN-LAST:event_combatButtonActionPerformed
	
	
	
	
    private void nextTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTurnButtonActionPerformed
      if ( already_fought && napakalakiModel.nextTurnAllowed() )
			{
				napakalakiModel.nextTurn();
        meet_the_monster = false;
				currentMonsterView.setHiddenMonster();
				already_fought	 = false;
        meetTheMonsterButton.setEnabled( true );
        combatButton.setEnabled( true );
				textArea.setText( "(TURN) Prepare for battle." );
        setNapakalaki( napakalakiModel );
			}
			else
			{
				textArea.setText( "(ERROR) No puedes pasar de turno, tienes mas de 4 tesoros \nocultos, no te has redimido o no has luchado." );
			}
    }//GEN-LAST:event_nextTurnButtonActionPerformed

    public void showView() {
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton combatButton;
    private GUI.MonsterView currentMonsterView;
    private GUI.PlayerView currentPlayerView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton meetTheMonsterButton;
    private javax.swing.JButton nextTurnButton;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    private Napakalaki napakalakiModel;
    boolean meet_the_monster = false;
		boolean already_fought = false;
    
	public void setNapakalaki( Napakalaki n ){
		
    setTitle("NAPAKALAKI - AHORA CON 1000% MAS DE EXPLOSIONES.");
		
		napakalakiModel = n;
        
		Player currentPlayer = n.getCurrentPlayer();
        
		currentPlayerView.setPlayer( currentPlayer );
        
		if ( meet_the_monster ) 
		{
      currentMonsterView.setMonster( n.getCurrentMonster() );
						
      currentPlayerView.disableTreasureButtons();
      meetTheMonsterButton.setEnabled( false );
      combatButton.setEnabled( true );
		}
		else  
		{
			
      combatButton.setEnabled( false );
      currentPlayerView.enableTreasureButtons();
						
      if ( !already_fought ) 
				meetTheMonsterButton.setEnabled( true );
		}
    
		/* 
		if ( already_fought )
			nextTurnButton.setEnabled( n.nextTurnAllowed() );
		else
			nextTurnButton.setEnabled( false );
		*/
        
		repaint();
		revalidate();
	}
}
