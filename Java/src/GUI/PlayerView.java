package GUI;
import Napakalaki.*;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;

public class PlayerView extends javax.swing.JPanel {

    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    nameLabel = new javax.swing.JLabel();
    levelLabel = new javax.swing.JLabel();
    enemyLabel = new javax.swing.JLabel();
    canStealLabel = new javax.swing.JLabel();
    levelProgressBar = new javax.swing.JProgressBar();
    jSeparator1 = new javax.swing.JSeparator();
    sectarioLabel = new javax.swing.JCheckBox();
    visibleTreasuresPanel = new javax.swing.JPanel();
    hiddenTreasuresPanel = new javax.swing.JPanel();
    stealTreasureButton = new javax.swing.JButton();
    makeVisibleButton = new javax.swing.JButton();
    discardTreasuresButton = new javax.swing.JButton();
    discardAllTreasuresButton = new javax.swing.JButton();
    pendingBadConsequenceView = new GUI.PendingBadConsequenceView();
    levelTextField = new javax.swing.JTextField();
    enemyTextField = new javax.swing.JTextField();
    canStealTextField = new javax.swing.JTextField();

    nameLabel.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
    nameLabel.setText("Jugador");

    levelLabel.setText("Level:");

    enemyLabel.setText("Enemy:");

    canStealLabel.setText("Can Steal:");

    levelProgressBar.setMaximum(10);
    levelProgressBar.setValue(1);

    sectarioLabel.setText("Cultist");
    sectarioLabel.setEnabled(false);
    sectarioLabel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sectarioLabelActionPerformed(evt);
      }
    });

    visibleTreasuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Visible Treasures"));

    hiddenTreasuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Hidden Treasures"));

    stealTreasureButton.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    stealTreasureButton.setText("Steal Treasure");
    stealTreasureButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        stealTreasureButtonActionPerformed(evt);
      }
    });

    makeVisibleButton.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    makeVisibleButton.setText("Make Visible");
    makeVisibleButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        makeVisibleButtonActionPerformed(evt);
      }
    });

    discardTreasuresButton.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    discardTreasuresButton.setText("Discard Treasures");
    discardTreasuresButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        discardTreasuresButtonActionPerformed(evt);
      }
    });

    discardAllTreasuresButton.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    discardAllTreasuresButton.setText("Discard All Treasures");
    discardAllTreasuresButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        discardAllTreasuresButtonActionPerformed(evt);
      }
    });

    pendingBadConsequenceView.setBorder(javax.swing.BorderFactory.createTitledBorder("Pending Bad Consequence"));

    levelTextField.setEditable(false);
    levelTextField.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    levelTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    levelTextField.setText("0");

    enemyTextField.setEditable(false);
    enemyTextField.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    enemyTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    enemyTextField.setText("None");

    canStealTextField.setEditable(false);
    canStealTextField.setFont(new java.awt.Font("Open Sans", 0, 10)); // NOI18N
    canStealTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    canStealTextField.setText("Yes");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(nameLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(sectarioLabel))
      .addComponent(pendingBadConsequenceView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
      .addComponent(visibleTreasuresPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jSeparator1)
          .addGroup(layout.createSequentialGroup()
            .addComponent(enemyLabel)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addGap(5, 5, 5))
      .addComponent(hiddenTreasuresPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(canStealLabel)
              .addComponent(levelLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addComponent(levelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(levelProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(enemyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(layout.createSequentialGroup()
                .addComponent(canStealTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(stealTreasureButton))))
          .addGroup(layout.createSequentialGroup()
            .addComponent(makeVisibleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(discardAllTreasuresButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(discardTreasuresButton)))
        .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(nameLabel)
          .addComponent(sectarioLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(levelLabel)
            .addComponent(levelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(levelProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(enemyLabel)
          .addComponent(enemyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(canStealLabel)
          .addComponent(stealTreasureButton)
          .addComponent(canStealTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(pendingBadConsequenceView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(visibleTreasuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(hiddenTreasuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(makeVisibleButton)
          .addComponent(discardAllTreasuresButton)
          .addComponent(discardTreasuresButton))
        .addGap(0, 0, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

    private void discardAllTreasuresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardAllTreasuresButtonActionPerformed
        napakalakiModel.getCurrentPlayer().discardAllTreasures();
        setPlayer( napakalakiModel.getCurrentPlayer() );
    }//GEN-LAST:event_discardAllTreasuresButtonActionPerformed

    private void stealTreasureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stealTreasureButtonActionPerformed
        // Intentamos robar.
        Treasure t = playerModel.stealTreasure();
        
        // Ha robado un tesoro exitosamente.
        if ( t != null ) {
            stealTreasureButton.setEnabled( false );
        }
        // No ha conseguido robar.
				
        setPlayer( napakalakiModel.getCurrentPlayer() );
    }//GEN-LAST:event_stealTreasureButtonActionPerformed

    private void makeVisibleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeVisibleButtonActionPerformed
        ArrayList<Treasure> selHidden = getSelectedTreasures( hiddenTreasuresPanel );
        napakalakiModel.makeTreasuresVisible( selHidden );
        setPlayer( napakalakiModel.getCurrentPlayer() );
    }//GEN-LAST:event_makeVisibleButtonActionPerformed

    private void discardTreasuresButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardTreasuresButtonActionPerformed
        ArrayList<Treasure> selHidden = getSelectedTreasures( hiddenTreasuresPanel );
        ArrayList<Treasure> selVisible = getSelectedTreasures( visibleTreasuresPanel );
        
        for ( Treasure i : selHidden ) {
            napakalakiModel.getCurrentPlayer().discardHiddenTreasure( i );
        }
        for ( Treasure j : selVisible ) {
            napakalakiModel.getCurrentPlayer().discardVisibleTreasure( j );
        }
        setPlayer( napakalakiModel.getCurrentPlayer() );
    }//GEN-LAST:event_discardTreasuresButtonActionPerformed

    private void sectarioLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectarioLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sectarioLabelActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel canStealLabel;
  private javax.swing.JTextField canStealTextField;
  private javax.swing.JButton discardAllTreasuresButton;
  private javax.swing.JButton discardTreasuresButton;
  private javax.swing.JLabel enemyLabel;
  private javax.swing.JTextField enemyTextField;
  private javax.swing.JPanel hiddenTreasuresPanel;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JLabel levelLabel;
  private javax.swing.JProgressBar levelProgressBar;
  private javax.swing.JTextField levelTextField;
  private javax.swing.JButton makeVisibleButton;
  private javax.swing.JLabel nameLabel;
  private GUI.PendingBadConsequenceView pendingBadConsequenceView;
  private javax.swing.JCheckBox sectarioLabel;
  private javax.swing.JButton stealTreasureButton;
  private javax.swing.JPanel visibleTreasuresPanel;
  // End of variables declaration//GEN-END:variables

    Napakalaki napakalakiModel = Napakalaki.getInstance();
    Player playerModel;
    
	public void setPlayer( Player p ) {
		playerModel = p;
        
		nameLabel.setText( p.getName() );
		if ( !p.isDead() ) 
		{
			levelTextField.setText( String.valueOf( p.getCombatLevel() ) );
			levelProgressBar.setValue( p.getLevels() );
    }
    else
    {
			levelTextField.setText( "Death" );
      levelProgressBar.setValue( 0 );
    }
		
		enemyTextField.setText( p.getEnemy().getName() );
        
    if ( p.canISteal() ) {
			canStealTextField.setText( "Yes" );
      stealTreasureButton.setEnabled( true );
    }
    else {
			canStealTextField.setText( "No" );
      stealTreasureButton.setEnabled( false );
    }
    // NOTA. Idea inspirada por Jose Casal:
    sectarioLabel.setSelected( p instanceof CultistPlayer );
        
    pendingBadConsequenceView.setPendingBadConsequence( p.getPendingBadConsequence() );
        
    fillTreasurePanel( visibleTreasuresPanel, playerModel.getVisibleTreasures() );
    fillTreasurePanel( hiddenTreasuresPanel, playerModel.getHiddenTreasures() );
       
    // Buttons.
    boolean activar = p.getHiddenTreasures().size() > 0 || p.getVisibleTreasures().size() > 0;
        
    makeVisibleButton.setEnabled( p.getHiddenTreasures().size() > 0 );
    discardTreasuresButton.setEnabled( activar );
    discardAllTreasuresButton.setEnabled( activar );
        
    repaint();
    revalidate();
	}
    
	public void disableTreasureButtons() {
		makeVisibleButton.setEnabled( false );
		discardTreasuresButton.setEnabled( false );
		discardAllTreasuresButton.setEnabled( false );
	}
    
	public void enableTreasureButtons() {
    boolean activar = playerModel.getHiddenTreasures().size() > 0 || playerModel.getVisibleTreasures().size() > 0;
		makeVisibleButton.setEnabled( playerModel.getHiddenTreasures().size() > 0 );
		discardTreasuresButton.setEnabled( activar );
		discardAllTreasuresButton.setEnabled( activar );
	}
    
  private void fillTreasurePanel ( JPanel aPanel, ArrayList<Treasure> aList ) {
    // Se elimina la información antigua
    aPanel.removeAll();
    // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
    // al panel
    for ( Treasure t : aList )  {
      TreasureView aTreasureView = new TreasureView();
      aTreasureView.setTreasure( t );
      aTreasureView.setVisible( true );
      aPanel.add (aTreasureView);
      //canStealLabel.setText( t.getName() );
		}
		// Se fuerza la actualización visual del panel
    aPanel.repaint();
    aPanel.revalidate();
  }
    
  private ArrayList<Treasure> getSelectedTreasures( JPanel aPanel ) {
    // Se recorren los tesoros que contiene el panel,
    // almacenando en un vector aquellos que están seleccionados.
    // Finalmente se devuelve dicho vector.
    TreasureView tv;
    ArrayList<Treasure> output = new ArrayList();
    for ( Component c : aPanel.getComponents() ) {
      tv = (TreasureView) c;
        if ( tv.isSelected() )
          output.add ( tv.getTreasure() );
    }
    return output;
  }
}
